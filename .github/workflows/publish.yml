name: Publish

on:
  release:
    types: [published]

defaults:
  run:
    shell: bash

permissions:
  id-token: write

env:
  ACTIONS_RUNNER_DEBUG: true

jobs:
  publish-npm:
    name: 'Publish changed packages to npm'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          registry-url: "https://registry.npmjs.org"

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Detect changed packages
        id: detect
        run: |
          CHANGED=()
          for pkg in Packages/*; do
            if [ -f "$pkg/package.json" ]; then
              NAME=$(jq -r .name "$pkg/package.json")
              CURR_VERSION=$(jq -r .version "$pkg/package.json")
              PREV_VERSION=$(git show HEAD^:"$pkg/package.json" | jq -r .version 2>/dev/null || echo "")

              echo "Checking $NAME: $PREV_VERSION -> $CURR_VERSION"

              if [[ "$CURR_VERSION" != "$PREV_VERSION" ]]; then
                echo "Package $NAME has a new version"
                CHANGED+=("$pkg")
              fi
            fi
          done

          echo "changed_packages<<EOF" >> $GITHUB_OUTPUT
          printf "%s\n" "${CHANGED[@]}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install deps
        if: steps.detect.outputs.changed_packages != ''
        run: bun install

      - name: Build and publish changed packages
        if: steps.detect.outputs.changed_packages != ''
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "${{ steps.detect.outputs.changed_packages }}" | while read pkg; do
            [ -z "$pkg" ] && continue
            VERSION=$(jq -r .version "$pkg/package.json")
            TAG="latest"
            [[ "$VERSION" == *"-beta."* ]] && TAG="beta"

            echo "Publishing $pkg with version $VERSION and tag $TAG"
            cd "$pkg"
            bun run build || true
            npm publish --provenance --access=public --tag "$TAG"
            cd - > /dev/null
          done
